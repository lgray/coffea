global coffea_udf, coffea_udf_flat


@fn.pandas_udf(BinaryType(), fn.PandasUDFType.SCALAR)
def coffea_udf(dataset, {% for col in cols %}{{col}}{{ "," if not loop.last }}{% endfor %}):
    global processor_instance, lz4_clevel
    
    columns = [{% for col in cols %}{{col}}{{ "," if not loop.last }}{% endfor %}]
    names = [{% for col in cols %}{{"'"|safe+col+"'"|safe}}{{ "," if not loop.last }}{% endfor %}]

    size = len(dataset)
    items = {}

    for i, col in enumerate(columns):
        if col.num_chunks != 1:
            raise Exception('Number of chunks for', names[i], 'is not 1!')
        items[names[i]] = awkward.fromarrow(col.chunk(0))        

    df = processor.PreloadedDataFrame(size=size, items=items)
    df['dataset'] = dataset.chunk(0)[0].as_py()
    
    vals = processor_instance.process(df)
    
    valsblob = lz4f.compress(pkl.dumps(vals), compression_level=lz4_clevel)
    
    outs = np.full(shape=(size, ), fill_value=b'', dtype='O')
    outs[0] = valsblob
    
    return pd.Series(outs)


@fn.pandas_udf(BinaryType(), fn.PandasUDFType.SCALAR)
def coffea_udf_flat(dataset, {% for col in cols %}{{col}}{{ "," if not loop.last }}{% endfor %}):
    global processor_instance, lz4_clevel
    
    columns = [{% for col in cols %}{{col}}{{ "," if not loop.last }}{% endfor %}]
    names = [{% for col in cols %}{{"'"|safe+col+"'"|safe}}{{ "," if not loop.last }}{% endfor %}]

    size = len(dataset)
    items = {}

    for i, col in enumerate(columns):
        if col.num_chunks != 1:
            raise Exception('Number of chunks for', names[i], 'is not 1!')        
        items[names[i]] = col.chunk(0).values

    df = processor.PreloadedDataFrame(size=size, items=items)
    df['dataset'] = dataset.chunk(0)[0].as_py()
    
    vals = processor_instance.process(df)
    
    valsblob = lz4f.compress(pkl.dumps(vals), compression_level=lz4_clevel)
    
    outs = np.full(shape=(size, ), fill_value=b'', dtype='O')
    outs[0] = valsblob
    
    return pd.Series(outs)
